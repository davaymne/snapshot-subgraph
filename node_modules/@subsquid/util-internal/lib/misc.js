"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitParallelWork = exports.splitArray = exports.splitSlice = exports.groupBy = exports.wait = exports.annotateAsyncError = exports.annotateSyncError = exports.withErrorContext = exports.addErrorContext = exports.ensureError = exports.NonErrorThrow = exports.runProgram = exports.maybeLast = exports.last = exports.unexpectedCase = exports.assertNotNull = void 0;
const assert_1 = __importDefault(require("assert"));
const process = __importStar(require("process"));
function assertNotNull(val, msg) {
    (0, assert_1.default)(val != null, msg);
    return val;
}
exports.assertNotNull = assertNotNull;
function unexpectedCase(val) {
    return new Error(val ? `Unexpected case: ${val}` : `Unexpected case`);
}
exports.unexpectedCase = unexpectedCase;
function last(array) {
    (0, assert_1.default)(array.length > 0);
    return array[array.length - 1];
}
exports.last = last;
function maybeLast(array) {
    return array.length > 0 ? array[array.length - 1] : undefined;
}
exports.maybeLast = maybeLast;
function runProgram(main, log) {
    function onerror(err) {
        if (log) {
            log(ensureError(err));
        }
        else {
            console.error(err);
        }
        process.exit(1);
    }
    try {
        main().then(() => process.exit(0), onerror);
    }
    catch (e) {
        onerror(e);
    }
}
exports.runProgram = runProgram;
class NonErrorThrow extends Error {
    constructor(value) {
        super('Non-error object was thrown');
        this.value = value;
    }
}
exports.NonErrorThrow = NonErrorThrow;
function ensureError(val) {
    if (val instanceof Error) {
        return val;
    }
    else {
        return new NonErrorThrow(val);
    }
}
exports.ensureError = ensureError;
function addErrorContext(err, ctx) {
    let e = err;
    for (let key in ctx) {
        if (e[key] == null) {
            e[key] = ctx[key];
        }
    }
    return err;
}
exports.addErrorContext = addErrorContext;
function withErrorContext(ctx) {
    return function (err) {
        throw addErrorContext(err, ctx);
    };
}
exports.withErrorContext = withErrorContext;
function annotateSyncError(getCtx) {
    return function decorate(proto, prop, d) {
        let { value: fn, ...options } = d;
        function annotate(err, args) {
            return addErrorContext(ensureError(err), getCtx(...args));
        }
        let value = function (...args) {
            try {
                return fn.apply(this, args);
            }
            catch (err) {
                throw annotate(err, args);
            }
        };
        return { value, ...options };
    };
}
exports.annotateSyncError = annotateSyncError;
function annotateAsyncError(getCtx) {
    return function decorate(proto, prop, d) {
        let { value: fn, ...options } = d;
        function annotate(err, args) {
            return addErrorContext(ensureError(err), getCtx(...args));
        }
        let value = function (...args) {
            try {
                return fn.apply(this, args).catch((err) => {
                    throw annotate(err, args);
                });
            }
            catch (err) {
                throw annotate(err, args);
            }
        };
        return { value, ...options };
    };
}
exports.annotateAsyncError = annotateAsyncError;
function wait(ms, abortSignal) {
    if (abortSignal) {
        return new Promise((resolve, reject) => {
            if (abortSignal.aborted)
                return reject(new Error('aborted'));
            abortSignal.addEventListener('abort', abort, { once: true });
            let timer = setTimeout(() => {
                abortSignal.removeEventListener('abort', abort);
                resolve();
            }, ms);
            function abort() {
                clearTimeout(timer);
                reject(new Error('aborted'));
            }
        });
    }
    else {
        return new Promise(resolve => {
            setTimeout(resolve, ms);
        });
    }
}
exports.wait = wait;
function groupBy(elements, group) {
    let grouping = new Map();
    for (let element of elements) {
        let key = group(element);
        let g = grouping.get(key);
        if (g == null) {
            grouping.set(key, [element]);
        }
        else {
            g.push(element);
        }
    }
    return grouping;
}
exports.groupBy = groupBy;
function* splitSlice(maxSize, beg, end) {
    (0, assert_1.default)(maxSize >= 1);
    end = end ?? Number.MAX_SAFE_INTEGER;
    while (beg < end) {
        let left = end - beg;
        let splits = Math.ceil(left / maxSize);
        let step = Math.round(left / splits);
        yield [beg, beg + step];
        beg += step;
    }
}
exports.splitSlice = splitSlice;
function* splitArray(maxSize, arr) {
    if (arr.length <= maxSize) {
        yield arr;
    }
    else {
        for (let [beg, end] of splitSlice(maxSize, 0, arr.length)) {
            yield arr.slice(beg, end);
        }
    }
}
exports.splitArray = splitArray;
async function splitParallelWork(maxSize, tasks, run) {
    if (tasks.length <= maxSize)
        return run(tasks);
    let promises = [];
    for (let group of splitArray(maxSize, tasks)) {
        promises.push(run(group));
    }
    let result = [];
    for (let group of await Promise.all(promises)) {
        result.push(...group);
    }
    return result;
}
exports.splitParallelWork = splitParallelWork;
//# sourceMappingURL=misc.js.map
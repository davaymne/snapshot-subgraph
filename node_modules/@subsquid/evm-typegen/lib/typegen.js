"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Typegen = void 0;
const ethers = __importStar(require("ethers"));
const util_internal_1 = require("@subsquid/util-internal");
const types_1 = require("./util/types");
class Typegen {
    constructor(dest, abi, basename, log) {
        this.dest = dest;
        this.abi = abi;
        this.basename = basename;
        this.log = log;
        this.out = dest.file(basename + '.ts');
    }
    generate() {
        this.out.line("import * as ethers from 'ethers'");
        this.out.line("import {LogEvent, Func, ContractBase} from './abi.support'");
        this.out.line(`import {ABI_JSON} from './${this.basename}.abi'`);
        this.out.line();
        this.out.line("export const abi = new ethers.Interface(ABI_JSON);");
        this.generateEvents();
        this.generateFunctions();
        this.generateContract();
        this.writeAbi();
        this.out.write();
        this.log.info(`saved ${this.out.file}`);
    }
    writeAbi() {
        let out = this.dest.file(this.basename + '.abi.ts');
        let json = this.abi.formatJson();
        json = JSON.stringify(JSON.parse(json), null, 4);
        out.line(`export const ABI_JSON = ${json}`);
        out.write();
        this.log.info(`saved ${out.file}`);
    }
    generateEvents() {
        let events = this.getEvents();
        if (events.length == 0) {
            return;
        }
        this.out.line();
        this.out.block(`export const events =`, () => {
            for (let e of events) {
                this.out.line(`${this.getPropName(e)}: new LogEvent<${(0, types_1.getFullTupleType)(e.inputs)}>(`);
                this.out.indentation(() => this.out.line(`abi, '${e.topicHash}'`));
                this.out.line('),');
            }
        });
    }
    generateFunctions() {
        let functions = this.getFunctions();
        if (functions.length == 0) {
            return;
        }
        this.out.line();
        this.out.block(`export const functions =`, () => {
            for (let f of functions) {
                let sighash = f.selector;
                let pArgs = (0, types_1.getTupleType)(f.inputs);
                let pArgStruct = (0, types_1.getStructType)(f.inputs);
                let pResult = (0, types_1.getReturnType)(f.outputs);
                this.out.line(`${this.getPropName(f)}: new Func<${pArgs}, ${pArgStruct}, ${pResult}>(`);
                this.out.indentation(() => this.out.line(`abi, '${sighash}'`));
                this.out.line('),');
            }
        });
    }
    generateContract() {
        this.out.line();
        this.out.block(`export class Contract extends ContractBase`, () => {
            let functions = this.getFunctions();
            for (let f of functions) {
                if (f.constant && f.outputs?.length) {
                    this.out.line();
                    let argNames = f.inputs.map((a, idx) => a.name || `arg${idx}`);
                    let args = f.inputs.map((a, idx) => `${argNames[idx]}: ${(0, types_1.getType)(a)}`).join(', ');
                    this.out.block(`${this.getPropName(f)}(${args}): Promise<${(0, types_1.getReturnType)(f.outputs)}>`, () => {
                        this.out.line(`return this.eth_call(functions${this.getRef(f)}, [${argNames.join(', ')}])`);
                    });
                }
            }
        });
    }
    getRef(item) {
        let key = this.getPropName(item);
        if (key[0] == "'") {
            return `[${key}]`;
        }
        else {
            return '.' + key;
        }
    }
    getPropName(item) {
        if (this.getOverloads(item) == 1) {
            return item.name;
        }
        else {
            return `'${item.format('sighash')}'`;
        }
    }
    getOverloads(item) {
        if (item instanceof ethers.EventFragment) {
            return this.eventOverloads()[item.name];
        }
        else {
            return this.functionOverloads()[item.name];
        }
    }
    functionOverloads() {
        let overloads = {};
        for (let item of this.getFunctions()) {
            overloads[item.name] = (overloads[item.name] || 0) + 1;
        }
        return overloads;
    }
    eventOverloads() {
        let overloads = {};
        for (let item of this.getEvents()) {
            overloads[item.name] = (overloads[item.name] || 0) + 1;
        }
        return overloads;
    }
    getFunctions() {
        return this.abi.fragments.filter(f => f.type === 'function');
    }
    getEvents() {
        return this.abi.fragments.filter(f => f.type === 'event');
    }
}
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], Typegen.prototype, "functionOverloads", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], Typegen.prototype, "eventOverloads", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], Typegen.prototype, "getFunctions", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], Typegen.prototype, "getEvents", null);
exports.Typegen = Typegen;
//# sourceMappingURL=typegen.js.map
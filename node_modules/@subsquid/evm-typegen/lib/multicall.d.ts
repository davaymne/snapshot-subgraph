import { ContractBase, Func } from './abi.support';
type AnyFunc = Func<any, {}, any>;
type Call = [address: string, bytes: string];
export type MulticallResult<T> = {
    success: true;
    value: T;
} | {
    success: false;
    returnData?: string;
    value?: undefined;
};
export declare class Multicall extends ContractBase {
    static aggregate: Func<[calls: Call[]], {}, {
        blockNumber: bigint;
        returnData: string[];
    }>;
    static try_aggregate: Func<[requireSuccess: boolean, calls: [target: string, callData: string][]], {}, {
        success: boolean;
        returnData: string;
    }[]>;
    aggregate<Args extends any[], R>(func: Func<Args, {}, R>, address: string, calls: Args[], paging?: number): Promise<R[]>;
    aggregate<Args extends any[], R>(func: Func<Args, {}, R>, calls: [address: string, args: Args][], paging?: number): Promise<R[]>;
    aggregate(calls: [func: AnyFunc, address: string, args: any[]][], paging?: number): Promise<any[]>;
    tryAggregate<Args extends any[], R>(func: Func<Args, {}, R>, address: string, calls: Args[], paging?: number): Promise<MulticallResult<R>[]>;
    tryAggregate<Args extends any[], R>(func: Func<Args, {}, R>, calls: [address: string, args: Args][], paging?: number): Promise<MulticallResult<R>[]>;
    tryAggregate(calls: [func: AnyFunc, address: string, args: any[]][], paging?: number): Promise<MulticallResult<any>[]>;
    private makeCalls;
}
export {};
//# sourceMappingURL=multicall.d.ts.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReturnType = exports.getStructType = exports.getTupleType = exports.getFullTupleType = exports.getType = void 0;
const assert_1 = __importDefault(require("assert"));
// taken from: https://github.com/ethers-io/ethers.js/blob/948f77050dae884fe88932fd88af75560aac9d78/packages/cli/src.ts/typescript.ts#L10
function getType(param) {
    if (param.baseType === 'array') {
        (0, assert_1.default)(param.arrayChildren != null, 'Missing children for array type');
        return 'Array<' + getType(param.arrayChildren) + '>';
    }
    if (param.baseType === 'tuple') {
        (0, assert_1.default)(param.components != null, 'Missing components for tuple type');
        return getFullTupleType(param.components);
    }
    if (param.type === 'address' || param.type === 'string') {
        return 'string';
    }
    if (param.type === 'bool') {
        return 'boolean';
    }
    let match = param.type.match(/^(u?int)([0-9]+)$/);
    if (match) {
        return parseInt(match[2]) < 53 ? 'number' : 'bigint';
    }
    if (param.type.substring(0, 5) === 'bytes') {
        return 'string';
    }
    throw new Error('unknown type');
}
exports.getType = getType;
function getFullTupleType(params) {
    let tuple = getTupleType(params);
    let struct = getStructType(params);
    if (struct == '{}') {
        return tuple;
    }
    else {
        return `(${tuple} & ${struct})`;
    }
}
exports.getFullTupleType = getFullTupleType;
function getTupleType(params) {
    return '[' + params.map(p => {
        return p.name ? `${p.name}: ${getType(p)}` : `_: ${getType(p)}`;
    }).join(', ') + ']';
}
exports.getTupleType = getTupleType;
// https://github.com/ethers-io/ethers.js/blob/278f84174409b470fa7992e1f8b5693e6e5d2dac/src.ts/abi/coders/tuple.ts#L36
function getStructType(params) {
    let array = [];
    let counts = {};
    for (let p of params) {
        if (p.name && array[p.name] == null) {
            counts[p.name] = (counts[p.name] || 0) + 1;
        }
    }
    let fields = params.filter(p => counts[p.name] == 1);
    return '{' + fields.map(f => `${f.name}: ${getType(f)}`).join(', ') + '}';
}
exports.getStructType = getStructType;
function getReturnType(outputs) {
    return outputs.length == 1 ? getType(outputs[0]) : getFullTupleType(outputs);
}
exports.getReturnType = getReturnType;
//# sourceMappingURL=types.js.map
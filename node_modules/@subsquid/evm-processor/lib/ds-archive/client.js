"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmArchive = void 0;
const util_internal_processor_tools_1 = require("@subsquid/util-internal-processor-tools");
const assert_1 = __importDefault(require("assert"));
const mapping_1 = require("./mapping");
class EvmArchive {
    constructor(client) {
        this.client = client;
    }
    getFinalizedHeight() {
        return this.client.getHeight();
    }
    async getBlockHash(height) {
        let blocks = await this.query({
            fromBlock: height,
            toBlock: height,
            includeAllBlocks: true
        });
        (0, assert_1.default)(blocks.length == 1);
        return blocks[0].header.hash;
    }
    getFinalizedBlocks(requests, stopOnHead) {
        return (0, util_internal_processor_tools_1.archiveIngest)({
            requests,
            heightTracker: new util_internal_processor_tools_1.PollingHeightTracker(() => this.getFinalizedHeight(), 10000),
            query: s => this.fetchSplit(s),
            stopOnHead
        });
    }
    async fetchSplit(s) {
        let blocks = await this.query({
            fromBlock: s.range.from,
            toBlock: s.range.to,
            fields: (0, mapping_1.withDefaultFields)(s.request.fields),
            includeAllBlocks: !!s.request.includeAllBlocks,
            transactions: s.request.transactions,
            logs: s.request.logs,
            traces: s.request.traces,
            stateDiffs: s.request.stateDiffs
        });
        return blocks.map(mapping_1.mapGatewayBlock);
    }
    query(q) {
        return this.client.query(q);
    }
}
exports.EvmArchive = EvmArchive;
//# sourceMappingURL=client.js.map
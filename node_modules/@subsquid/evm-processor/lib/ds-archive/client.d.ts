import { ArchiveClient } from '@subsquid/util-internal-archive-client';
import { Batch, DataSource, RangeRequest } from '@subsquid/util-internal-processor-tools';
import { AllFields, BlockData } from '../interfaces/data';
import { DataRequest } from '../interfaces/data-request';
import { Bytes32 } from '../interfaces/evm';
type Block = BlockData<AllFields>;
export declare class EvmArchive implements DataSource<Block, DataRequest> {
    private client;
    constructor(client: ArchiveClient);
    getFinalizedHeight(): Promise<number>;
    getBlockHash(height: number): Promise<Bytes32>;
    getFinalizedBlocks(requests: RangeRequest<DataRequest>[], stopOnHead?: boolean | undefined): AsyncIterable<Batch<Block>>;
    private fetchSplit;
    private query;
}
export {};
//# sourceMappingURL=client.d.ts.map
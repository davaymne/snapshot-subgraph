import { Logger } from '@subsquid/logger';
import { RpcClient } from '@subsquid/rpc-client';
import { Batch, HotDatabaseState, HotDataSource, HotUpdate, RangeRequest } from '@subsquid/util-internal-processor-tools';
import { AllFields, BlockData } from '../interfaces/data';
import { DataRequest } from '../interfaces/data-request';
type Block = BlockData<AllFields>;
export interface EvmRpcDataSourceOptions {
    rpc: RpcClient;
    finalityConfirmation: number;
    pollInterval?: number;
    strideSize?: number;
    preferTraceApi?: boolean;
    useDebugApiForStateDiffs?: boolean;
    log?: Logger;
}
export declare class EvmRpcDataSource implements HotDataSource<Block, DataRequest> {
    private rpc;
    private strideSize;
    private finalityConfirmation;
    private pollInterval;
    private useDebugApiForStateDiffs;
    private preferTraceApi;
    private log?;
    constructor(options: EvmRpcDataSourceOptions);
    getFinalizedHeight(): Promise<number>;
    private getHeight;
    getBlockHash(height: number): Promise<string>;
    getGenesisHash(): Promise<string>;
    getHotBlocks(requests: RangeRequest<DataRequest>[], state: HotDatabaseState): AsyncIterable<HotUpdate<Block>>;
    private getHotUpdate;
    private fetchHotBlock;
    getFinalizedBlocks(requests: RangeRequest<DataRequest>[], stopOnHead?: boolean): AsyncIterable<Batch<Block>>;
    private getStride0;
    private processBlocks;
    private fetchRequestedData;
    private fetchLogs;
    private requestLogs;
    private fetchReceiptsByBlock;
    private getBlockReceiptsMethod;
    private fetchReceiptsByTx;
    private fetchTraces;
    private fetchReplays;
    private fetchTraceBlock;
    private fetchDebugFrames;
    private fetchDebugStateDiffs;
    private fetchArbitrumOneTraces;
}
export {};
//# sourceMappingURL=client.d.ts.map
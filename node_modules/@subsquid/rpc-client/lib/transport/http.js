"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpConnection = void 0;
const http_client_1 = require("@subsquid/http-client");
const errors_1 = require("../errors");
class HttpConnection {
    constructor(url, log) {
        this.url = url;
        this.log = log;
        this.agent = new http_client_1.HttpAgent({
            keepAlive: true
        });
        this.http = new http_client_1.HttpClient({
            agent: this.agent
        });
    }
    close(err) {
        if (err) {
            this.log?.error(err);
        }
        this.agent.close();
    }
    connect() {
        return Promise.resolve();
    }
    async call(req, timeout) {
        let res = await this.http.post(this.url, {
            json: req,
            httpTimeout: timeout,
            retryAttempts: 0
        });
        if (req.id !== res.id) {
            throw new errors_1.RpcProtocolError(1008, `Got response for unknown request ${res.id}`);
        }
        return res;
    }
    async batchCall(batch, timeout) {
        let res = await this.http.post(this.url, {
            json: batch,
            httpTimeout: timeout,
            retryAttempts: 0
        });
        if (!Array.isArray(res)) {
            throw new errors_1.RpcProtocolError(1008, `Response for a batch request should be an array`);
        }
        if (res.length != batch.length) {
            throw new errors_1.RpcProtocolError(1008, `Invalid length of a batch response`);
        }
        let reordered = false;
        for (let i = 0; i < batch.length; i++) {
            if (batch[i].id !== res[i].id) {
                reordered = true;
                break;
            }
        }
        if (reordered) {
            let m = new Map(res.map(r => [r.id, r]));
            res = new Array(batch.length);
            for (let i = 0; i < batch.length; i++) {
                let r = m.get(batch[i].id);
                if (r == null) {
                    throw new errors_1.RpcProtocolError(1008, `Missing result from call ${JSON.stringify(batch[i])} in the batch response`);
                }
                res[i] = r;
            }
        }
        return res;
    }
}
exports.HttpConnection = HttpConnection;
//# sourceMappingURL=http.js.map
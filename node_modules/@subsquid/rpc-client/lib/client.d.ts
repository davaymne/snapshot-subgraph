import { Logger } from '@subsquid/logger';
import { RpcRequest } from './interfaces';
export interface RpcClientOptions {
    url: string;
    maxBatchCallSize?: number;
    capacity?: number;
    requestTimeout?: number;
    rateLimit?: number;
    retryAttempts?: number;
    retrySchedule?: number[];
    log?: Logger | null;
}
export interface CallOptions<R = any> {
    priority?: number;
    retryAttempts?: number;
    timeout?: number;
    /**
     * Result validator/transformer
     *
     * This option is mainly a way to utilize built-in retry machinery by throwing {@link RetryError}.
     * Otherwise, `client.call(...).then(validateResult)` is a better option.
     */
    validateResult?: ResultValidator<R>;
}
type ResultValidator<R = any> = (result: any, req: RpcRequest) => R;
export declare class RpcClient {
    private counter;
    private queue;
    readonly url: string;
    private con;
    private maxBatchCallSize;
    private requestTimeout;
    private retrySchedule;
    private retryAttempts;
    private capacity;
    private log?;
    private rate?;
    private rateLimit;
    private schedulingScheduled;
    private connectionErrorsInRow;
    private connectionErrors;
    private requestsServed;
    private backoffEpoch;
    private closed;
    constructor(options: RpcClientOptions);
    private createConnection;
    getMetrics(): {
        url: string;
        requestsServed: number;
        connectionErrors: number;
    };
    call<T = any>(method: string, params?: any[], options?: CallOptions<T>): Promise<T>;
    batchCall<T = any>(batch: {
        method: string;
        params?: any[];
    }[], options?: CallOptions<T>): Promise<T[]>;
    private batchCallInternal;
    private enqueue;
    private schedule;
    private delayScheduling;
    private performScheduling;
    private send;
    private waitForConnection;
    private backoff;
    private getBackoffPause;
    private receiveResult;
    isConnectionError(err: Error): boolean;
    close(err?: Error): void;
    private assertNotClosed;
}
export {};
//# sourceMappingURL=client.d.ts.map
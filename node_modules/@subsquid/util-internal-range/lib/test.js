"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const fc = __importStar(require("fast-check"));
const node_test_1 = require("node:test");
const util_1 = require("./util");
const aFiniteRange = fc.tuple(fc.nat(), fc.nat()).map(([a, b]) => {
    if (a < b) {
        return { from: a, to: b };
    }
    else {
        return { from: b, to: a };
    }
});
const aOpenRange = fc.nat().map(a => ({ from: a }));
const aPointRange = fc.nat().map(a => ({ from: a, to: a }));
const aRange = fc.oneof(aFiniteRange, aOpenRange, aPointRange);
const aOptionalRange = fc.option(aRange, { freq: 10, nil: undefined });
const aBatch = fc.array(aOptionalRange).map(ranges => {
    return ranges.map((maybeRange, id) => {
        let range = maybeRange || { from: 0 };
        return {
            range,
            request: [
                { id, range }
            ]
        };
    });
});
function assertion(test, params) {
    let prop = fc.property(aBatch, original => {
        let merged = (0, util_1.mergeRangeRequests)(original, (a, b) => a.concat(b));
        return test(merged, original);
    });
    fc.assert(prop, params);
}
(0, node_test_1.describe)('merge range requests', function () {
    (0, node_test_1.it)('ranges are well formed', function () {
        assertion(batches => {
            return batches.every(b => {
                try {
                    (0, util_1.assertRange)(b.range);
                    return true;
                }
                catch (e) {
                    return false;
                }
            });
        });
    });
    (0, node_test_1.it)('ranges are properly sorted and do not intersect', function () {
        assertion(batches => {
            try {
                (0, util_1.assertRangeList)(batches.map(b => b.range));
                return true;
            }
            catch (e) {
                return false;
            }
        });
    });
    (0, node_test_1.it)('each handler is never called outside of its range', function () {
        assertion(batches => {
            return batches.every(b => {
                return b.request.every(h => {
                    return (0, util_1.rangeContains)(h.range, b.range);
                });
            });
        });
    });
    (0, node_test_1.it)('the entire range of each request is covered', function () {
        assertion((merged, original) => {
            let uncovered = new Map(original.flatMap(b => b.request).map(h => [h.id, h.range]));
            merged.forEach(b => {
                b.request.forEach(h => {
                    let uncoveredRange = uncovered.get(h.id);
                    (0, assert_1.default)(uncoveredRange != null);
                    let diff = (0, util_1.rangeDifference)(uncoveredRange, b.range);
                    if (diff.length == 0) {
                        uncovered.delete(h.id);
                    }
                    else {
                        (0, assert_1.default)(diff.length == 1);
                        uncovered.set(h.id, diff[0]);
                    }
                });
            });
            return uncovered.size == 0;
        });
    });
});
//# sourceMappingURL=test.js.map